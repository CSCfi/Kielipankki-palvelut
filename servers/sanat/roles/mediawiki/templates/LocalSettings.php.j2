<?php
# {{ ansible_managed }}

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

$IP = __DIR__;
$VHOST = '{{ instance.key }}';

ini_set( 'error_log', "/www/$VHOST/logs/error_php" );
ini_set( 'display_errors',         0 );
ini_set( 'ignore_repeated_errors', 1 );
ini_set( 'log_errors',             1 );
ini_set( 'expose_php',             0 );
ini_set( 'memory_limit',      '450M' );
ini_set( 'max_execution_time', '60s' );
$wgDebugLogGroups['exception'] = ini_get( 'error_log' );
$wgDebugLogGroups['error'] = ini_get( 'error_log' );
$wgDebugLogGroups['fatal'] = ini_get( 'error_log' );

// For SMW
$wgDeprecationReleaseLimit = '1.36';
error_reporting( E_ALL | E_STRICT );
date_default_timezone_set( 'UTC' );
$wgLocaltimezone = 'Europe/Helsinki';

$wgLocalisationCacheConf['store'] = 'file';
$wgLocalisationCacheConf['manualRecache'] = true;
$wgLocalisationCacheConf['storeDirectory'] = "$IP/cache";
$wgSecretKey = file_get_contents( "/www/$VHOST/secretkey" );

$wgServer = $wgCanonicalServer = "https://$VHOST";
$wgArticlePath = "/wiki/$1";
$wgScriptPath = "/w";
$wgMainPageIsDomainRoot = true;

## Database settings
$wgDBtype = "mysql";
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";
$wgSQLMode = 'TRADITIONAL';

## Shared memory settings
$wgMainCacheType = 'memcached-pecl';
$wgParserCacheType = 'memcached-pecl';
$wgSessionCacheType = 'memcached-db';
$wgMemCachedServers = [ 'localhost:11211' ];
$wgObjectCaches['memcached-db'] = [
	'class' => 'MultiWriteBagOStuff',
	'caches' => [
		[
			'factory' => [ 'ObjectCache', 'getInstance' ],
			'args' => [ 'memcached-pecl' ]
		],
		[
			'factory' => [ 'ObjectCache', 'getInstance' ],
			'args' => [ CACHE_DB ]
		],
	],
	'replication' => 'sync',
	'reportDupes' => false
];

$wgShellLocale = "en_US.utf8";
$wgDiff3 = "/usr/bin/diff3";
$wgJobRunRate = 0;

$wgLanguageCode = 'fi';
$wgDefaultUserOptions['usenewrc'] = 1;
$wgIncludejQueryMigrate = true;

$wgGroupPermissions['*']['edit'] = false;
$wgGroupPermissions['sysop']['deletebatch'] = true;
$wgGroupPermissions['*']['viewedittab'] = true;
$wgGroupPermissions['sysop']['viewedittab'] = true;
$wgDisableAnonEdit = true;
$wgGroupPermissions['*']['createpage'] = true;

$wgUseRCPatrol = false;
$wgUseNPPatrol = false;

$wgEnableUploads = true;
$wgUploadPath = "/uploads";
$wgUploadDirectory = "/www/$VHOST/docroot/uploads";
$wgMaxImageArea = 75e6; // 75MP

$wgDefaultUserOptions['usenewrc'] = 1;
$wgRCMaxAge = 365 * 24 * 3600; // 1 year
$wgShowIPinHeader = false;
$wgEnotifWatchlist = true;

$wgCacheDirectory = "/www/$VHOST/cache";

require __DIR__ . '/LocalSettings-site.php';

// Spam tools
wfLoadExtension( 'AbuseFilter' );
$wgGroupPermissions['sysop']['abusefilter-modify'] = true;
$wgGroupPermissions['*']['abusefilter-log-detail'] = true;
$wgGroupPermissions['*']['abusefilter-view'] = true;
$wgGroupPermissions['*']['abusefilter-log'] = true;
$wgGroupPermissions['sysop']['abusefilter-privatedetails'] = true;
$wgGroupPermissions['sysop']['abusefilter-modify-restricted'] = true;
$wgGroupPermissions['sysop']['abusefilter-revert'] = true;
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'UserMerge' );
$wgGroupPermissions['bureaucrat']['usermerge'] = true;
wfLoadExtension( 'SmiteSpam' );
$wgDisplayPageSize = 10;
$wgSmiteSpamIgnoreSmallPages = false;
$wgSmiteSpamIgnorePagesWithNoExternalLinks = false;
wfLoadExtension( 'SpamBlacklist' );
$wgBlacklistSettings = [
	'spam' => [
		'files' => [
			'/srv/mediawiki/spam-filter.txt',
		],
	],
	'email' => [
		'files' =>  [
			'/srv/mediawiki/email-filter.txt',
		],
	],
];

{% if nocaptcha is defined %}
wfLoadExtensions( [ 'ConfirmEdit', 'ConfirmEdit/ReCaptchaNoCaptcha' ] );
$wgReCaptchaSiteKey = '{{ nocaptcha.site }}';
$wgReCaptchaSecretKey = '{{ nocaptcha.secret }}';
$wgReCaptchaSendRemoteIP = true;
$wgCaptchaTriggers['edit'] = false;
$wgCaptchaTriggers['create'] = false;
$wgCaptchaTriggers['addurl'] = false;
$wgCaptchaTriggers['createaccount'] = true;
$wgCaptchaTriggers['badlogin'] = true;
{% endif %}

$wgHooks['LiquidThreadsIsLqtPage'][] = function ( $title, &$isTalkPage ) {
	if ( $title->inNamespace( NS_USER_TALK ) ) {
		$user = User::newFromName( $title->getRootText() );
		$isTalkPage = $user && $user->isRegistered();
	}
};

# This must be in the parent directory, because everything under workdir can be wiped out
# by the ansible scripts. This enables easier development by allowing changing stuff without
# running the slow scripts, as well as keeping those changes.
if ( file_exists( '/srv/mediawiki/LocalLocalSettings.php' ) ) {
	require '/srv/mediawiki/LocalLocalSettings.php';
}
