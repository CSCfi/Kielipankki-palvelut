---

- name: Ensure directories exists
  become: no
  command: mkdir -p "{{ item }}"
  args:
    creates: "{{ item }}"
    warn: false
  loop:
    - "{{ src_root }}"
    - "{{ install_dir }}/jars/lib"
    - "{{ install_dir }}/models"
    - "{{ install_dir }}/bin"

- name: Get source
  unarchive:
    src: "{{ release_url }}"
    dest: "{{ src_root }}"
    remote_src: yes

- name: Get cstlemma parts
  git:
    repo: "{{ kuhumcst_url }}/{{ item.name }}"
    dest: "{{ src_root }}/{{ item.name }}"
    version: "{{ item.githash }}"
    accept_hostkey: yes
    force: yes
  loop: "{{ kuhumcst_git_pkgs }}"
  
- name: set cstlemma STREAM
  lineinfile:
    path: "{{ src_root }}/cstlemma/src/defines.h"
    regexp: "^#define STREAM 0"
    line: "#define STREAM 1 // 0: use stdio 1: use iostream"

- name: make cstlemma 
  shell: bash --login -c "{{ gcc_modcall }} make  > MAKE.log"
  args:
    chdir: "{{ src_root }}/cstlemma/src"

- name: Install cstlemma
  copy:
    src: "{{ src_root }}/cstlemma/cstlemma"
    dest: "{{ install_dir }}/bin"
    remote_src: yes
    mode: 0775

- name: create suc-saldo src files
  shell: cat {suc,saldo}.cstlemma.lemmas > suc-saldo.cstlemma.lemmas
  args:
    chdir: "{{ compile_dir }}/annotate/models/"
   
- name: compile cstlemma dicts
  shell: bash --login -c "{{ install_dir }}/bin/cstlemma -D -c FBT -e 1  -i {{ item }}.cstlemma.lemmas -o {{ item }}.cstlemma.dict"
  args:
    chdir: "{{ compile_dir }}/annotate/models/"
  with_items:
    - suc
    - saldo
    - suc-saldo
  async: 120
  poll: 0
  register: dict_compile

- name: compile cstlemma flex
  shell: bash --login -c "{{ install_dir }}/bin/cstlemma -FF -c FBT -e 1 -R- -C 2 -i {{ item }}.cstlemma.lemmas -o {{ item }}.cstlemma.flex"
  args:
    chdir: "{{ compile_dir }}/annotate/models/"
  with_items:
    - suc
    - saldo
    - suc-saldo
  async: 600
  poll: 0
  register: flex_compile

- name: Check flex compile
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: jobs_result
  with_items: "{{ flex_compile.results }}"
  until: jobs_result.finished
  delay: 20
  retries: 40

- name: Check dict compile # to be sure
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: jobs_result
  with_items: "{{ dict_compile.results }}"
  until: jobs_result.finished
  delay: 1
  retries: 40

- name: Copy sparv pipeline to install_dir
  copy:
    remote_src: true
    src: "{{ compile_dir }}/{{ item.src }}"
    dest: "{{ install_dir }}/{{ item.dest }}"
    mode: 0664
  loop:
    - { src: 'annotate/bin/maltparser-1.7.2/maltparser-1.7.2.jar', dest: 'jars'}
    - { src: 'annotate/bin/maltparser-1.7.2/lib/liblinear-1.8.jar', dest: 'jars/lib'}
    - { src: 'annotate/bin/maltparser-1.7.2/lib/libsvm.jar', dest: 'jars/lib'}
    - { src: 'annotate/bin/maltparser-1.7.2/lib/log4j.jar', dest: 'jars/lib'}
    - { src: 'annotate/models/swemalt-1.7.2.mco', dest: 'models' }
    - { src: 'annotate/models/hunpos.suc3.suc-tags.default-setting.utf8.model', dest: 'models' }
    - { src: 'annotate/models/hunpos.dalinm-swedberg.saldo.suc-tags.morphtable', dest: 'models' }
    - { src: 'annotate/models/suc.cstlemma.lemmas', dest: 'models' }
    - { src: 'annotate/models/saldo.cstlemma.lemmas', dest: 'models' }
    - { src: 'annotate/models/suc-saldo.cstlemma.lemmas', dest: 'models' }
    - { src: 'annotate/models/saldo.cstlemma.dict', dest: 'models' }
    - { src: 'annotate/models/saldo.cstlemma.flex', dest: 'models' }
    - { src: 'annotate/models/suc.cstlemma.dict', dest: 'models' }
    - { src: 'annotate/models/suc.cstlemma.flex', dest: 'models' }
    - { src: 'annotate/models/suc-saldo.cstlemma.dict', dest: 'models' }
    - { src: 'annotate/models/suc-saldo.cstlemma.flex', dest: 'models' }

- name: Fix permissions (if shared group is set)
  file:
    path: "{{ install_dir }}"
    group: "{{ shared_group }}"
    mode: "g+rwX,o+rX,o-w"
    recurse: yes
  when: shared_group is defined